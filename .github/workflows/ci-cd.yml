name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: analytics_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- Backend Steps ---
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      - name: Create .env file for backend tests
        run: |
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/analytics_db_test" > backend/.env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> backend/.env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> backend/.env
          echo "OLLAMA_API_BASE=${{ secrets.OLLAMA_API_BASE }}" >> backend/.env
      
      - name: Run backend tests
        env:
          PYTHONPATH: ./backend
        run: python -m pytest backend/tests

      # --- Frontend Steps ---
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm install --prefix frontend

      - name: Run frontend tests
        run: npm test --prefix frontend -- --watchAll=false

      # --- Docker Setup ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          # Install the latest Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # --- Build Docker Images ---
      - name: Build Docker images
        run: |
          echo "DATABASE_URL=dummy" > .env
          docker-compose up --build -d
          docker-compose down